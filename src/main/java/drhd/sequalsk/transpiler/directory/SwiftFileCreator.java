package drhd.sequalsk.transpiler.directory;

import drhd.sequalsk.transpiler.context.factory.DirectoryContextFactory;
import drhd.sequalsk.transpiler.sequalskclient.result.TranspiledFile;
import drhd.sequalsk.transpiler.sequalskclient.result.TranspilerResult;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import javax.swing.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

/**
 * Last step to transpile a directory. Creates Swift files from a transpiler result.
 */
public class SwiftFileCreator extends DirectoryTranspilerProcessor {

    /** The result that was generated by the previous step. */
    private final TranspilerResult transpilerResult;

    public SwiftFileCreator(TranspileDirectoryDialog transpileDirectoryDialog, TranspilerResult transpilerResult) {
        super(transpileDirectoryDialog);
        this.transpilerResult = transpilerResult;
    }

    @Override
    protected DirectoryTranspilerProcessor getNextProcessor() {
        return null;
    }

    @Override
    protected Integer getStepOrder() {
        return 4;
    }

    @Override
    protected String getStepTitle() {
        return "Create Swift Files";
    }

    @Override
    protected String getStepDescription() {
        long directoryFiles = transpilerResult.getAllFiles()
                .stream()
                .filter(transpiledFile -> (Boolean) transpiledFile.getOriginalFile().getTag(DirectoryContextFactory.IS_DIRECTORY_FILE_TAG))
                .count();
        return "Creating " + directoryFiles + " files";
    }

    @Override
    protected JLabel getProgressLabel() {
        return dialog.getLabelStepFourProgress();
    }

    @Override
    protected void executeStep() {
        List<TranspiledFile> transpiledFiles = transpilerResult.getAllFiles();

        for (TranspiledFile transpiledFile : transpiledFiles) {
            boolean isDirectoryFile = (Boolean) transpiledFile.getOriginalFile().getTag(DirectoryContextFactory.IS_DIRECTORY_FILE_TAG);
            if(!isDirectoryFile) continue;

            String filename = transpiledFile.getOriginalFile().getName();
            String filenameWithoutExt = FilenameUtils.getBaseName(transpiledFile.getOriginalFile().getPath());
            String filenameSwift = filenameWithoutExt + ".swift";

            String originalPathAbsolute = transpiledFile.getOriginalFile().getPath().split(filename)[0]; // without file name
            String pathRelativeToInputDir = originalPathAbsolute.substring(dialog.getInputDirectory().length()); // remove input dir
            String swiftFilePath = dialog.getOutputDirectory() + pathRelativeToInputDir + filenameSwift;

            addEditorContent("\n");
            if (createFile(swiftFilePath, transpiledFile.getTranspiledContent())) {
                addEditorContent("Created " + swiftFilePath + "\n");
            } else {
                finishedFailure("Could not create file " + swiftFilePath  + "\n");
                return;
            }
        }
    }

    protected boolean createFile(String absolutePath, String content) {
        try {
            File myObj = new File(absolutePath);
            FileUtils.touch(myObj);
            writeFile(myObj, content);
            return true;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    protected void writeFile(File file, String content) throws IOException {
        FileWriter myWriter = new FileWriter(file);
        myWriter.write(content);
        myWriter.close();
    }

    protected File asFile(String path) {
        return new File(path);
    }

}
