package drhd.sequalsk.transpiler.context.factory;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import drhd.sequalsk.transpiler.sequalskclient.request.TranspilerContext;
import drhd.sequalsk.transpiler.sequalskclient.request.TranspilerRequest;
import drhd.sequalsk.transpiler.sequalskclient.request.TranspilerRequestFile;
import drhd.sequalsk.transpiler.utils.TranspilerContextType;
import drhd.sequalsk.utils.PluginVirtualFileUtils;
import java.util.ArrayList;
import java.util.List;

/**
 * Base class for all context factories that generate the {@link TranspilerContext} for a {@link TranspilerRequest}.
 */
abstract public class TranspilerContextFactory {

    protected final Project project;

    public TranspilerContextFactory(Project project) {
        this.project = project;
    }

    public TranspilerContext build() {
        TranspilerContext context = buildContext();
        context.addTag(TranspilerContextType.TAG_KEY, getContextType());
        return context;
    }

    /**
     * Must implement the creation of the {@link TranspilerContext} object.
     */
    abstract protected TranspilerContext buildContext();

    /**
     * Returns the type of context that is generated by this factory.
     */
    abstract protected TranspilerContextType getContextType();

    /**
     * Converts a virtual file to a {@link TranspilerRequestFile} that is usable by the {@link TranspilerContext}.
     */
    protected TranspilerRequestFile asTranspilerFile(VirtualFile virtualFile) {
        return new TranspilerRequestFile(
                virtualFile.getPath(),
                virtualFile.getName(),
                PluginVirtualFileUtils.getText(virtualFile).toString()
        );
    }

    /**
     * Converts a list of virtual files to a list of {@link TranspilerRequestFile}
     * @see this#asTranspilerFile
     */
    protected List<TranspilerRequestFile> asTranspilerFiles(List<VirtualFile> virtualFiles) {
        List<TranspilerRequestFile> files = new ArrayList<>();
        virtualFiles.forEach(virtualFile -> files.add(asTranspilerFile(virtualFile)));
        return files;
    }

}
